{"version":3,"sources":["webpack:///./src/pages/blog.tsx","webpack:///./src/templates/tags-page.tsx"],"names":["withLayout","props","data","tags","group","posts","edges","location","pathname","Math","ceil","totalCount","pageQuery","Blog"],"mappings":"gGAAA,yFAkGeA,uBA5EE,SAACC,GACHA,EAAMC,KAAKC,KAAKC,MACfH,EAAMC,KAAKG,MAAMC,MACVL,EAAMM,SAAnBC,SACUC,KAAKC,KAAKT,EAAMC,KAAKG,MAAMM,WAAa,IAkDzD,OACC,gBAAC,IAAD,SAuBG,IAAMC,EAAY,Y,kCCnGzB,iEAGeC,YAAf,QAEO,IAAMD,EAAY","file":"component---src-templates-tags-page-tsx-a48fadc01e47503f76c0.js","sourcesContent":["import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport { Header, Grid, Card, List, Container, Feed, Segment, Comment } from \"semantic-ui-react\";\nimport { MarkdownRemarkConnection, ImageSharp } from \"../graphql-types\";\nimport BlogTitle from \"../components/BlogTitle\";\nimport TagsCard from \"../components/TagsCard/TagsCard\";\nimport BlogPagination from \"../components/BlogPagination/BlogPagination\";\nimport { get } from \"lodash\";\nimport {withLayout, LayoutProps} from \"../components/Layout\";\nimport { MarkdownRemark } from \"../graphql-types\";\n\ninterface BlogProps extends LayoutProps {\n  data: {\n    tags: MarkdownRemarkConnection;\n    posts: MarkdownRemarkConnection;\n  };\n  pageContext: {\n    tag?: string; // only set into `templates/tags-pages.tsx`\n  };\n}\n\nconst BlogPage = (props: BlogProps) => {\n  const tags = props.data.tags.group;\n  const posts = props.data.posts.edges;\n  const { pathname } = props.location;\n  const pageCount = Math.ceil(props.data.posts.totalCount / 10);\n\n  // TODO export posts in a proper component\n  // const Posts = (\n    // <Container>\n    //   {posts.map(({ node }: {node: MarkdownRemark}) => {\n    //     const { frontmatter, timeToRead, fields: { slug }, excerpt } = node;\n    //     const avatar = frontmatter.author.avatar.children[0] as ImageSharp;\n    //     const cover = get(frontmatter, \"image.children.0.fixed\", {});\n\n    //     const extra = (\n    //       <Comment.Group>\n    //         <Comment>\n    //           <Comment.Avatar\n    //             src={avatar.fixed.src}\n    //             srcSet={avatar.fixed.srcSet}\n    //           />\n    //           <Comment.Content>\n    //             <Comment.Author style={{ fontWeight: 400 }}>\n    //               {frontmatter.author.id}\n    //             </Comment.Author>\n    //             <Comment.Metadata style={{ margin: 0 }}>\n    //               {frontmatter.updatedDate} - {timeToRead} min read\n    //           </Comment.Metadata>\n    //           </Comment.Content>\n    //         </Comment>\n    //       </Comment.Group>\n    //     );\n\n    //     const description = (\n    //       <Card.Description>\n    //         {excerpt}\n    //         <br />\n    //         <Link to={slug}>Read moreâ€¦</Link>\n    //       </Card.Description>\n    //     );\n\n    //     return (\n    //       <Card key={slug}\n    //         fluid\n    //         image={cover}\n    //         header={frontmatter.title}\n    //         extra={extra}\n    //         description={description}\n    //       />\n    //     );\n    //   })}\n    // </Container>\n  // );\n\n   return (\n    <Container>\n   \n  {/* //     <BlogTitle />\n\n  //     <Segment vertical>\n  //       <Grid padded style={{ justifyContent: \"space-around\" }}>\n  //         <div style={{ maxWidth: 600 }}>\n  //           {Posts}\n  //           <Segment vertical textAlign=\"center\">\n  //             <BlogPagination Link={Link} pathname={pathname} pageCount={pageCount} />\n  //           </Segment>\n  //         </div>\n  //         <div>\n  //           <TagsCard Link={Link} tags={tags} tag={props.pageContext.tag} />\n  //         </div>\n  //       </Grid>\n  //     </Segment> */}\n    </Container>\n  );\n};\n\nexport default withLayout(BlogPage);\n\nexport const pageQuery = graphql`\nquery PageBlog {\n  # Get tags\n  tags: allMarkdownRemark(filter: {frontmatter: {draft: {ne: true}}}) {\n    group(field: frontmatter___tags) {\n      fieldValue\n      totalCount\n    }\n  }\n\n  # Get posts\n  posts: allMarkdownRemark(\n    sort: { order: DESC, fields: [frontmatter___updatedDate] },\n    filter: {\n      frontmatter: { draft: { ne: true } },\n      fileAbsolutePath: { regex: \"/blog/\" }\n    },\n    limit: 10\n  ) {\n    totalCount\n    edges {\n      node {\n        excerpt\n        timeToRead\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          updatedDate(formatString: \"DD MMMM, YYYY\")\n          image {\n          \tchildren {\n              ... on ImageSharp {\n                fixed(width: 700, height: 100) {\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n          author {\n            id\n            avatar {\n              children {\n                ... on ImageSharp {\n                  fixed(width: 35, height: 35) {\n                    src\n                    srcSet\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n","import * as React from \"react\";\nimport Blog from \"../pages/blog\";\nimport { graphql } from \"gatsby\";\n\nexport default Blog;\n\nexport const pageQuery = graphql`\nquery TemplateTagPage($tag: String) {\n  # Get tags\n  tags: allMarkdownRemark(filter: {frontmatter: {draft: {ne: true}}}) {\n    group(field: frontmatter___tags) {\n      fieldValue\n      totalCount\n    }\n  }\n\n  # Get posts\n  posts: allMarkdownRemark(\n    sort: { order: DESC, fields: [frontmatter___updatedDate] },\n    filter: {\n      frontmatter: {\n        draft: { ne: true }\n        tags: { in: [$tag] }\n      },\n      fileAbsolutePath: { regex: \"/blog/\" }\n    }\n  ) {\n    totalCount\n    edges {\n      node {\n        excerpt\n        timeToRead\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          updatedDate(formatString: \"DD MMMM, YYYY\")\n          image {\n          \tchildren {\n              ... on ImageSharp {\n                fixed(width: 700, height: 100) {\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n          author {\n            id\n            avatar {\n              children {\n                ... on ImageSharp {\n                  fixed(width: 35, height: 35) {\n                    src\n                    srcSet\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n"],"sourceRoot":""}